class DSU {
public :

    vector<int> parent, rank;
    DSU(int n){
        parent.resize(n);
        rank.resize(n,0);
        for(int i = 0; i<n;i++) parent[i] =i;
    }
    
    int find(int i) {
        if(parent[i] != i)
            parent[i] = find(parent[i]);
        
        return parent[i];
    }
    
    void Union(int x, int y) {
        int p_x = find(x);
        int p_y = find(y);
        
        if(p_x != p_y) {
            if(rank[p_x] > rank[p_y]) {
                parent[p_y] = p_x;
            } else if(rank[p_y] > rank[p_x]) {
                parent[p_x] = p_y;
            } else {
                parent[p_x] = p_y;
                rank[p_y]++;
            }
        }
    }
    // Can also do UnionBySize (its same as rank, but for sizes)
};
