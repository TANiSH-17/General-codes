#include <bits/stdc++.h>
using namespace std;

class SegmentTree {
private:
    int n;
    vector<long long> tree;

    void build(const vector<int>& arr, int node, int start, int end) {
        if (start == end) {
            tree[node] = arr[start];  // Leaf node
        } else {
            int mid = (start + end) / 2;
            build(arr, 2 * node, start, mid);         // Left child
            build(arr, 2 * node + 1, mid + 1, end);    // Right child
            tree[node] = tree[2 * node] + tree[2 * node + 1];  // Combine
        }
    }

    void update(int node, int start, int end, int idx, int val) {
        if (start == end) {
            tree[node] = val;  // Update leaf
        } else {
            int mid = (start + end) / 2;
            if (idx <= mid)
                update(2 * node, start, mid, idx, val);
            else
                update(2 * node + 1, mid + 1, end, idx, val);
            tree[node] = tree[2 * node] + tree[2 * node + 1];  // Recompute
        }
    }

    long long query(int node, int start, int end, int l, int r) {
        if (r < start || end < l)
            return 0;  // No overlap
        if (l <= start && end <= r)
            return tree[node];  // Complete overlap
        int mid = (start + end) / 2;
        long long left = query(2 * node, start, mid, l, r);
        long long right = query(2 * node + 1, mid + 1, end, l, r);
        return left + right;  // Combine
    }

public:
    SegmentTree(const vector<int>& arr) {
        n = arr.size();
        tree.resize(4 * n);
        build(arr, 1, 0, n - 1);
    }

    // Point update: arr[idx] = val
    void update(int idx, int val) {
        update(1, 0, n - 1, idx, val);
    }

    // Range sum query: sum from [l...r]
    long long query(int l, int r) {
        return query(1, 0, n - 1, l, r);
    }
};
